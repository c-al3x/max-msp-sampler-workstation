The whole project largely functions off of gates, message boxes, delays, selects, groove~, and odot. The following are all abstractions implemented for the patch:

1. abstractPlayer
2. abstractPlayerSet
3. abstractBlinker
4. abstractOn
5. abstractRow
6. abstractSetInfo

The loading of samples and needed information from the start is a process that mostly occurs in abstractRow, abstractBlinker, abstractOn, and abstractSetInfo. In these abstractions, once the audio files are loaded into the sample, each row of 5 audio files has its filename extracted as well as its duration. abstractBlinker and abstraction handle my DIY interface tricks of blinking message boxes and turning on and off the toggles for audio files currently playing or not. 

Several patches were also implemented with the most crucial being sampleplayer, which is underneath the readfolder message box. Inside the patch, sampleplayer, there is an immediate horror to the eyes. Wires are everywhere and while many aligned, many are over each other, underneath boxes, and so on. It devolved into quite a mess, but it nonetheless maintains some sense of order and organization. The sampleplayer patch (and in general how the patch handles user input) is based off how a computer CPU handles instructions: fetch an instruction, decode the instruction, and then execute the instruction. During this process, there are registers (aka message boxes) storing simple information that should be cached for quick use. There is of course the memory of the buffers that will need to be accessed as well. Most instructions are either taken in as a list of two elements or understood as a symbol and then a following numerical value(s). For instance, when you hit a number and hit 'enter' for a sample, a list of the number associated with that sample and the number you entered are allowed through a gate of 20 in which each lead to a groove~ object. This gate of 20 is near the bottom of sampleplayer. Each of these gates leads to one of the two abstractPlayerSet abstractions which each contain 10 abstractPlayer abstractions. Inside abstractPlayer, the instruction is decoded as either a Standard Mode instruction or a File Mode instruction. Once this is understood (typically using more gates, selects, and toggles), the instruction can be routed either to a groove~ object or message boxes affecting such a groove~ object. The output after these executions can be routed back through the abstractPlayerSet and then into sampleplayer (and possibly into the main patch window), but sometimes send/receive objects are utilized for simpler passing of such information between patches.  Again, this was largely based on the data path of a CPU (though in a quite simplified and messier fashion). This was easily the most fun yet frustrating aspect of it all. It reminded me of classes such as CS61C and CS162. I applied some of the material from those courses into this project. For instance, the idea of locks was implemented (mostly through gates and selects) when avoiding race conditions for certain resources needed to be accessed for the execution of an instruction.

There are unfortunately a considerable amount of bugs throughout this patch. It might be of no surprise given how much is going on in each little patch or abstraction. You might find that your numerical input is no longer being taken in or that you can no longer play samples. If that is the case, enter File Mode of your samples and take the Lock off or turn off the interlock with the Master BPM. Sometimes, audio files might start playing bizarrely and this tends to be due to improper values passed in for start/end points (you can always reset with 'r' in order to fix this) or for beats when getting tempo (you can always reset the tempo determined by the patch by hitting 'g' again and typing a different set of beats in case you entered the wrong amount). In the worst case scenario, hit the small 'bang' button to the right hand side, which will do so some reloading. If even that doesn't fix what the issue may be, restart the patch.

While there are unfortunately bugs that you may come across, I have offered some samples and instructions in manipulating them in order to demonstrate how one can use the patch. Please do read especially if the patch is acting incredibly buggy. Following these instructions should at least allow you to see what the patch is capable of. Load the folder of samples given and make sure the audio is on. There are four samples and four full songs. Let's explore the four samples. The first is a drum loop. You may set its tempo by entering File Mode, hitting 'g', and entering the number 8. The tempo should now be set. Let's say you set it to 142 by hitting 't' and then entering that number. Now, for the piano loop, enter File Mode for it (by the way, if you ever have troubling entering File Mode for another sample after just exiting out of it, move your mouse cursor a little bit over the section of the new sample you'd like to enter File Mode for). Then hit 'g' and enter the number 16. Set it to 142 as well. Enter Standard Mode and begin playing the drum loop sample, with (hopefully) good timing, hit 'enter' for the piano loop sample to start playing. They should be in sync at 142 BPM! If you would like to explore messing around with tempo, try setting the snare sample to an incredibly slow tempo It's incessant speed should be gone. You can adjust the volume quite high for the soft sample to see how the volume slider works for files. 

Hopefully that all works and makes sense. Thank you for reading!